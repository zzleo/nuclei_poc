id: headless-open-redirect

info:
  name: Client-Side Open Redirect Scanner
  author: geeknik
  severity: medium
  description: |
    Advanced client-side open redirect vulnerability detection using Headless Protocol
    for comprehensive URL manipulation analysis. This template performs JavaScript-based
    redirect detection, DOM-based navigation testing, postMessage redirect analysis,
    and hash-based navigation vulnerabilities while maintaining defensive research
    principles for identifying client-side open redirect attack vectors.
  reference:
    - https://owasp.org/www-community/attacks/Open_Redirect
    - https://portswigger.net/web-security/dom-based/open-redirection
    - https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html
  tags: open-redirect,client-side,dom,javascript,headless,defensive

headless:
  - steps:
      # Navigate to target page
      - action: navigate
        args:
          url: "{{BaseURL}}"

      # Wait for page to fully load
      - action: waitload

      # Initialize open redirect testing framework
      - action: script
        name: initialize_redirect_testing
        args:
          code: |
            (function() {
              window.openRedirectResults = {
                redirect_mechanisms: [],
                vulnerabilities: [],
                test_results: [],
                url_parameters: [],
                dom_sources: [],
                navigation_sinks: [],
                risk_assessment: {}
              };

              // Analyze URL parameters for potential redirect sources
              var urlParams = new URLSearchParams(window.location.search);
              var hashParams = new URLSearchParams(window.location.hash.substring(1));

              // Common redirect parameter names
              var redirectParams = [
                'redirect', 'redir', 'url', 'link', 'goto', 'target', 'dest', 'destination',
                'continue', 'return', 'returnto', 'return_to', 'next', 'forward', 'callback',
                'success_url', 'failure_url', 'redirect_uri', 'return_url', 'success_redirect'
              ];

              // Check URL parameters for redirect indicators
              for (var i = 0; i < redirectParams.length; i++) {
                var param = redirectParams[i];
                if (urlParams.has(param)) {
                  window.openRedirectResults.url_parameters.push({
                    name: param,
                    value: urlParams.get(param),
                    source: 'query_parameter',
                    risk: 'medium'
                  });
                }
                if (hashParams.has(param)) {
                  window.openRedirectResults.url_parameters.push({
                    name: param,
                    value: hashParams.get(param),
                    source: 'hash_parameter',
                    risk: 'medium'
                  });
                }
              }

              // Identify potential DOM sources for redirect vulnerabilities
              window.openRedirectResults.dom_sources = [
                {
                  name: 'location.search',
                  value: window.location.search,
                  controlled_by_user: true
                },
                {
                  name: 'location.hash',
                  value: window.location.hash,
                  controlled_by_user: true
                },
                {
                  name: 'location.href',
                  value: window.location.href,
                  controlled_by_user: false
                },
                {
                  name: 'document.referrer',
                  value: document.referrer,
                  controlled_by_user: false
                },
                {
                  name: 'document.URL',
                  value: document.URL,
                  controlled_by_user: false
                }
              ];

              // Identify potential navigation sinks
              window.openRedirectResults.navigation_sinks = [
                'location.href', 'location.assign', 'location.replace',
                'window.open', 'document.location', 'window.location',
                'history.pushState', 'history.replaceState'
              ];

              // Scan page scripts for redirect patterns
              var scripts = Array.from(document.scripts);
              for (var j = 0; j < scripts.length; j++) {
                var script = scripts[j];
                if (script.textContent) {
                  var content = script.textContent;

                  // Look for redirect patterns in JavaScript
                  var redirectPatterns = [
                    /location\.href\s*=.*?(location\.search|location\.hash|getParameter)/gi,
                    /window\.location\s*=.*?(location\.search|location\.hash)/gi,
                    /location\.assign\s*\(.*?(location\.search|location\.hash)/gi,
                    /location\.replace\s*\(.*?(location\.search|location\.hash)/gi,
                    /window\.open\s*\(.*?(location\.search|location\.hash)/gi,
                    /document\.location\s*=.*?(location\.search|location\.hash)/gi
                  ];

                  for (var k = 0; k < redirectPatterns.length; k++) {
                    var pattern = redirectPatterns[k];
                    var matches = content.match(pattern);
                    if (matches) {
                      for (var m = 0; m < matches.length; m++) {
                        var match = matches[m];
                        var contextStart = Math.max(0, content.indexOf(match) - 100);
                        var contextEnd = Math.min(content.length, content.indexOf(match) + 200);
                        window.openRedirectResults.redirect_mechanisms.push({
                          type: 'javascript_redirect',
                          script_index: j,
                          pattern_index: k,
                          match: match,
                          context: content.substring(contextStart, contextEnd),
                          risk: 'high'
                        });
                      }
                    }
                  }
                }
              }

              return window.openRedirectResults;
            })()

      # Test URL parameter-based open redirects
      - action: navigate
        args:
          url: "{{BaseURL}}?redirect=https://evil.com&url=https://malicious.com&goto=javascript:alert('redirect')"

      - action: waitload

      - action: script
        name: test_url_parameter_redirects
        args:
          code: |
            (function() {
              window.openRedirectResults.test_results.push('url_parameter_redirect_testing');

              try {
                // Check if page processes URL parameters for redirects
                var currentUrl = window.location.href;
                var urlParams = new URLSearchParams(window.location.search);

                // Monitor location changes
                var locationChangeDetected = false;
                var originalLocation = window.location.href;

                // Test common redirect parameter processing
                var redirectTestParams = ['redirect', 'url', 'goto'];
                for (var i = 0; i < redirectTestParams.length; i++) {
                  var param = redirectTestParams[i];
                  if (urlParams.has(param)) {
                    var paramValue = urlParams.get(param);

                    // Check if parameter value appears in page content
                    var pageContent = document.documentElement.outerHTML;
                    if (pageContent.indexOf(paramValue) !== -1) {
                      window.openRedirectResults.vulnerabilities.push({
                        type: 'redirect_parameter_reflection',
                        severity: 'low',
                        parameter: param,
                        value: paramValue,
                        description: 'Redirect parameter value reflected in page content',
                        confirmed: true
                      });
                    }

                    // Simulate click events that might trigger redirects
                    var links = document.querySelectorAll('a, button');
                    for (var j = 0; j < links.length; j++) {
                      var element = links[j];
                      if (element.href && element.href.indexOf(paramValue) !== -1) {
                        window.openRedirectResults.vulnerabilities.push({
                          type: 'link_redirect_parameter',
                          severity: 'medium',
                          parameter: param,
                          value: paramValue,
                          element_index: j,
                          element_href: element.href,
                          description: 'Link href contains redirect parameter value',
                          confirmed: true
                        });
                      }
                    }
                  }
                }

              } catch (e) {
                window.openRedirectResults.test_results.push('url_parameter_test_error: ' + e.message);
              }

              return window.openRedirectResults;
            })()

      # Test hash-based open redirects
      - action: navigate
        args:
          url: "{{BaseURL}}#redirect=https://evil.com&url=https://malicious.com"

      - action: waitload

      - action: script
        name: test_hash_based_redirects
        args:
          code: |
            (function() {
              window.openRedirectResults.test_results.push('hash_based_redirect_testing');

              try {
                // Test if current hash is processed for redirects
                var currentHash = window.location.hash;
                if (currentHash) {
                  var hashParams = new URLSearchParams(currentHash.substring(1));

                  // Check if hash parameters affect page behavior
                  var testParams = ['redirect', 'url', 'goto'];
                  for (var i = 0; i < testParams.length; i++) {
                    var param = testParams[i];
                    if (hashParams.has(param)) {
                      var paramValue = hashParams.get(param);

                      // Look for hash parameter processing in scripts
                      var scripts = Array.from(document.scripts);
                      for (var j = 0; j < scripts.length; j++) {
                        var script = scripts[j];
                        if (script.textContent) {
                          var content = script.textContent;

                          // Check if script processes hash parameters
                          if (content.indexOf('location.hash') !== -1 &&
                              (content.indexOf('redirect') !== -1 || content.indexOf('location.href') !== -1)) {
                            window.openRedirectResults.vulnerabilities.push({
                              type: 'hash_parameter_processing',
                              severity: 'medium',
                              parameter: param,
                              value: paramValue,
                              script_index: j,
                              description: 'Script processes hash parameters for redirection',
                              confirmed: true
                            });
                          }
                        }
                      }
                    }
                  }
                }

              } catch (e) {
                window.openRedirectResults.test_results.push('hash_based_test_error: ' + e.message);
              }

              return window.openRedirectResults;
            })()

      # Test postMessage-based redirects
      - action: script
        name: test_postmessage_redirects
        args:
          code: |
            (function() {
              window.openRedirectResults.test_results.push('postmessage_redirect_testing');

              try {
                // Set up postMessage listener for redirect testing
                window.postMessageRedirectTest = function(event) {
                  window.openRedirectResults.test_results.push('postmessage_received_for_redirect_test');

                  // Check if postMessage data contains redirect information
                  if (event.data && typeof event.data === 'object') {
                    var data = event.data;

                    var testKeys = ['redirect', 'url', 'goto', 'navigate', 'location'];
                    for (var i = 0; i < testKeys.length; i++) {
                      var key = testKeys[i];
                      if (data[key]) {
                        window.openRedirectResults.vulnerabilities.push({
                          type: 'postmessage_redirect_data',
                          severity: 'medium',
                          key: key,
                          value: data[key],
                          origin: event.origin,
                          description: 'PostMessage contains redirect instructions',
                          confirmed: true
                        });
                      }
                    }

                    // Test if postMessage data triggers actual redirect
                    if (data.action === 'redirect' && data.url) {
                      try {
                        // Simulate redirect handling code (common pattern)
                        if (data.url.indexOf('http') === 0) {
                          window.openRedirectResults.vulnerabilities.push({
                            type: 'postmessage_redirect_vulnerability',
                            severity: 'high',
                            action: data.action,
                            url: data.url,
                            origin: event.origin,
                            description: 'PostMessage triggers external redirect',
                            confirmed: true
                          });
                        }
                      } catch (e) {
                        window.openRedirectResults.test_results.push('postmessage_redirect_simulation_error: ' + e.message);
                      }
                    }
                  }
                };

                window.addEventListener('message', window.postMessageRedirectTest, false);

                // Send test postMessages to ourselves
                var testMessages = [
                  { action: 'redirect', url: 'https://evil.com' },
                  { redirect: 'https://malicious.com' },
                  { goto: 'javascript:alert("redirect")' },
                  { navigate: { url: 'https://attacker.com', target: '_blank' } }
                ];

                for (var i = 0; i < testMessages.length; i++) {
                  var message = testMessages[i];
                  setTimeout(function(msg) {
                    return function() {
                      window.postMessage(msg, window.location.origin);
                    };
                  }(message), i * 200);
                }

              } catch (e) {
                window.openRedirectResults.test_results.push('postmessage_redirect_test_error: ' + e.message);
              }

              return window.openRedirectResults;
            })()

      # Final open redirect assessment
      - action: script
        name: final_redirect_assessment
        args:
          code: |
            (function() {
              // Clean up test listener
              try {
                window.removeEventListener('message', window.postMessageRedirectTest, false);
              } catch (e) {
                // Ignore cleanup errors
              }

              // Calculate comprehensive open redirect risk score
              var riskScore = 0;
              var confirmedVulns = [];

              for (var i = 0; i < window.openRedirectResults.vulnerabilities.length; i++) {
                if (window.openRedirectResults.vulnerabilities[i].confirmed) {
                  confirmedVulns.push(window.openRedirectResults.vulnerabilities[i]);
                }
              }

              for (var j = 0; j < confirmedVulns.length; j++) {
                var vuln = confirmedVulns[j];
                switch (vuln.severity) {
                  case 'critical': riskScore += 35; break;
                  case 'high': riskScore += 25; break;
                  case 'medium': riskScore += 15; break;
                  case 'low': riskScore += 5; break;
                }
              }

              // Additional risk factors
              var urlParamsCount = window.openRedirectResults.url_parameters.length;
              var redirectMechanismsCount = window.openRedirectResults.redirect_mechanisms.length;

              riskScore += urlParamsCount * 3;
              riskScore += redirectMechanismsCount * 5;

              var highRiskVulns = 0;
              for (var k = 0; k < confirmedVulns.length; k++) {
                if (confirmedVulns[k].severity === 'high') {
                  highRiskVulns++;
                }
              }

              window.openRedirectResults.risk_assessment = {
                total_vulnerabilities: confirmedVulns.length,
                redirect_parameters_found: urlParamsCount,
                redirect_mechanisms_detected: redirectMechanismsCount,
                high_risk_vulnerabilities: highRiskVulns,
                risk_score: Math.min(riskScore, 100),
                risk_level: riskScore > 70 ? 'Critical' :
                           riskScore > 50 ? 'High' :
                           riskScore > 30 ? 'Medium' : 'Low',
                test_coverage: window.openRedirectResults.test_results.length,
                recommendations: []
              };

              window.openRedirectResults.summary = {
                scan_completed: true,
                timestamp: new Date().toISOString(),
                open_redirect_vulnerabilities_found: confirmedVulns.length > 0,
                comprehensive_testing_completed: true
              };

              return window.openRedirectResults;
            })()

    extractors:
      - type: regex
        name: open_redirect_summary
        part: body
        regex:
          - '"scan_completed":\s*true'

      - type: regex
        name: confirmed_open_redirects
        part: body
        regex:
          - '"open_redirect_vulnerabilities_found":\s*true'

    matchers:
      - type: regex
        name: open_redirect_detected
        regex:
          - '"open_redirect_vulnerabilities_found":\s*true'

      - type: regex
        name: high_risk_open_redirect
        regex:
          - '"risk_level":\s*"(Critical|High)"'

# Headless template for comprehensive client-side open redirect detection